		
		Aggregate functions: COUNT, MAX, MIN etc,
			WHERE clause cannot be used along with aggregate funcs, we should be using HAVING clause.

		JOINS:
			INNER JOIN: add only records which satisfy condition from both the tables
			LEFT JOIN: add all records from left table, and records from right table if they satisfy condition
			RIGHT JOIN: add all records from right table, and records from left table if they satisfy condition
			FULL JOIN: add all records form both tables
			NOTE: if a record has no value after join, it will be replaced with null.

		

		https://www.geeksforgeeks.org/sql-query-interview-questions/	

	1. Write a SQL query to fetch “FIRST_NAME” from the Student table in upper case and use ALIAS name as STUDENT_NAME.
		select upper(first_name) as STUDENT_NAME from student

	2. Write a SQL query to fetch unique values of MAJOR Subjects from Student table.
		select distinct major from student
		select major from student group by(major)

	3. Write a SQL query to print the first 3 characters of FIRST_NAME from Student table.
		select SUBSTRING(first_name, 1, 3) from student

	4. Write a SQL query to find the position of alphabet (‘a’) in the first name column ‘Shivansh’ from Student table.
		select INSTR(first_name, 'a') from student where first_name="Shivansh"

	5. Write a SQL query that fetches the unique values of MAJOR Subjects from Student table and print its length.
		select distinct major, LENGTH(major) as length from student group by(major)
		SELECT DISTINCT MAJOR, LENGTH(MAJOR) FROM Student

	6. Write a SQL query to print FIRST_NAME from the Student table after replacing ‘a’ with ‘A’.
		select REPLACE(first_name, 'a', 'A') from student

	7. Write a SQL query to print the FIRST_NAME and LAST_NAME from Student table into single column COMPLETE_NAME.
		select CONCAT(first_name, ' ', last_name) as full name from student; 

	8. Write a SQL query to print all Student details from Student table order by FIRST_NAME Ascending and MAJOR Subject descending .
		select * from student order by first_name ASC, major DESC

	9. Write a SQL query to print details of the Students with the FIRST_NAME as ‘Prem’ and ‘Shivansh’ from Student table.
		select * from student where first_name = 'Prem' or first_name='Shivansh'
		select * from student where first_name IN('Prem', 'Shivansh')

	10. Write a SQL query to print details of the Students excluding FIRST_NAME as ‘Prem’ and ‘Shivansh’ from Student table.	select * from student where first_name NOT IN('Prem', 'Shivansh')

	11. Write a SQL query to print details of the Students whose FIRST_NAME ends with ‘a’.
		select * from student where first_name LIKE '%a'

	12. Write an SQL query to print details of the Students whose FIRST_NAME ends with ‘a’ and contains atleast eight alphabets
		select * from student where first_name LIKE '%______a'

	13. Write an SQL query to print details of the Students whose GPA lies between 9.00 and 9.99.
		select * from student where gpa BETWEEN 9.00 AND 9.99

	14. Write an SQL query to fetch the count of Students having Major Subject ‘Computer Science’.
		select COUNT(*) from student where major=‘Computer Science’

	15. Write an SQL query to fetch Students full names with GPA >= 8.5 and <= 9.5.
		select concat(first_name, ' ', last_name) as full name from student where gpa between 8.5 and 9.5

	16. Write an SQL query to fetch the no. of Students for each MAJOR subject in the descending order.
		select major, count(major) from student group by(major) order by count(major) DESC

	17. Display the details of students who have received scholarships, including their names, scholarship amounts, and scholarship dates.
kgj		select student.first_name, student_last_name, scholarship.amount, sholarship.sholarship_date from student
		inner join scholarship
		on
		student.student_id = scholarship.student_ref_id

	18. Write an SQL query to show student details whose student ids are odd.
		select * from student where student_id%2 != 0

	20. List all students and their scholarship amounts if they have received any. If a student has not received a scholarship, display NULL for the scholarship details.
		SELECT 
		    Student.FIRST_NAME,
		    Student.LAST_NAME,
		    COALESCE(Scholarship.SCHOLARSHIP_AMOUNT, NULL) AS SCHOLARSHIP_AMOUNT,
		    COALESCE(Scholarship.SCHOLARSHIP_DATE, NULL) AS SCHOLARSHIP_DATE
		FROM 
		    Student
		LEFT JOIN 
		    Scholarship ON Student.STUDENT_ID = Scholarship.STUDENT_REF_ID;

	21. Write an SQL query to show the top n (say 5) records of Student table order by descending GPA.
		SELECT * from Student ORDER BY GPA DESC LIMIT 5;

	22. Write an SQL query to determine the nth (say n=5) highest GPA from a table.
		SELECT * FROM Student ORDER BY GPA DESC LIMIT 4, 1;

	23. Write an SQL query to determine the 5th highest GPA without using LIMIT keyword.
		SELECT * FROM Student s1 
			WHERE 4 = (
			    SELECT COUNT(DISTINCT (s2.GPA)) 
			    FROM Student s2
			    WHERE s2.GPA >= s1.GPA
			);

	24. Write an SQL query to fetch the list of Students with the same GPA.
		SELECT id, name, gpa
		FROM students
		WHERE gpa IN (
		    SELECT gpa
		    FROM students
		    GROUP BY gpa
		    HAVING COUNT(*) > 1
		)
		ORDER BY gpa;

	25. Write an SQL query to show the second highest GPA from a Student table using sub-query.
		select max(gpa) from student where gpa < (select max(gpa) from student)
		SELECT MAX(GPA) FROM Student
				WHERE GPA NOT IN(SELECT MAX(GPA) FROM Student);

	27. Write an SQL query to list STUDENT_ID who does not get Scholarship.
			select student_id from student where student_id NOT IN (select student_ref_id from scholarship)

	29. Write an SQL query to fetch the MAJOR subject that have less than 4 people in it.
		SELECT MAJOR, COUNT(MAJOR) AS MAJOR_COUNT FROM Student GROUP BY MAJOR HAVING COUNT(MAJOR) < 4;

	37. Write an SQL query to fetch MAJOR subjects along with the max GPA in each of these MAJOR subjects.
			SELECT MAJOR, MAX(GPA) as MAXGPA FROM Student GROUP BY MAJOR;

	41. Write an SQL query to update the GPA of all the students in ‘Computer Science’ MAJOR subject to 7.5.
			UPDATE Student SET GPA = 4.0 WHERE MAJOR = 'Computer Science';

	42. Write an SQL query to find the average GPA for each major.		
			SELECT MAJOR, AVG(GPA) AS AVERAGE_GPA FROM Student GROUP BY MAJOR;

	44. Write an SQL query to find the number of students in each major who have a GPA greater than 7.5.
			SELECT MAJOR, COUNT(STUDENT_ID) AS HIGH_GPA_COUNT FROM Student WHERE GPA > 7.5 GROUP BY MAJOR;

	45. Write an SQL query to find the students who have the same GPA as ‘Shivansh Mahajan’.
			SELECT * FROM Student WHERE GPA = (SELECT GPA FROM Student WHERE FIRST_NAME = 'Shivansh' 
				AND LAST_NAME = 'Mahajan');

